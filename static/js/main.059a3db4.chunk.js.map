{"version":3,"sources":["components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","state","todo","mytodos","addTodo","_this","newTodo","push","setState","alert","onChange","e","target","value","del","index","splice","checkKey","keyCode","which","_this2","this","react_default","a","createElement","className","placeholder","autoFocus","onKeyPress","onClick","map","key","React","Component","App","console","log","components_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgEeA,oNA9DXC,MAAQ,CACJC,KAAM,GACNC,QAAS,MAGbC,QAAU,WACR,GAAsB,IAAnBC,EAAKJ,MAAMC,KACd,CACE,IAAMI,EAAUD,EAAKJ,MAAME,QAC3BG,EAAQC,KAAKF,EAAKJ,MAAMC,MAExBG,EAAKG,SAAS,CAAEL,QAASG,IACzBD,EAAKG,SAAS,CAACN,KAAM,UAIrBO,MAAM,2BAIVC,SAAW,SAAAC,GACPN,EAAKG,SAAS,CAAEN,KAAMS,EAAEC,OAAOC,WAGnCC,IAAM,SAAAC,GACF,IAAMT,EAAUD,EAAKJ,MAAME,QAC3BG,EAAQU,OAAOD,EAAO,GACtBV,EAAKG,SAAS,CAAEL,QAASG,OAE7BW,SAAW,SAACN,GAEC,KADAA,EAAEO,SAAWP,EAAEQ,QAEtBd,EAAKD,mFAIL,IAAAgB,EAAAC,KACN,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAETH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,cACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAY,SACjBC,YAAY,kBACZb,MAAOQ,KAAKpB,MAAMC,KAClBQ,SAAUW,KAAKX,SACfiB,UAAU,YACVC,WAAYP,KAAKJ,WAEnBK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcI,QAASR,KAAKjB,SAA9C,eACAkB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXJ,KAAKpB,MAAME,QAAQ2B,IAAI,SAAC5B,EAAMa,GAAP,OACtBO,EAAAC,EAAAC,cAAA,OAAKO,IAAKhB,GACRO,EAAAC,EAAAC,cAAA,MAAIK,QAAS,SAAAlB,GAAC,OAAIS,EAAKN,IAAIC,KAASb,GACpCoB,EAAAC,EAAAC,cAAA,uBAtDGQ,IAAMC,YCkBVC,mLAZX,OADAC,QAAQC,MAENd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACnBH,EAAAC,EAAAC,cAACa,EAAD,eANaL,IAAMC,WCQJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.059a3db4.chunk.js","sourcesContent":["import React from 'react';\nclass Todo extends React.Component {\n    state = {\n        todo: \"\",\n        mytodos: []\n    };\n\n    addTodo = () => {\n      if(this.state.todo != \"\")\n      {\n        const newTodo = this.state.mytodos;\n        newTodo.push(this.state.todo);\n\n        this.setState({ mytodos: newTodo});\n        this.setState({todo: \"\" });\n      }\n      else\n      {\n        alert(\"please enter a task.\");\n      }\n    };\n\n    onChange = e => {\n        this.setState({ todo: e.target.value });\n    };\n\n    del = index => {\n        const newTodo = this.state.mytodos;\n        newTodo.splice(index, 1);\n        this.setState({ mytodos: newTodo });\n    };\n    checkKey = (e) => {\n      var code = e.keyCode || e.which;\n      if(code == 13) {\n          this.addTodo();\n      }\n  }\n\n render() {\n    return (\n    <div className=\"App\">\n      \n          <h1 className=\"heading\">To-do List</h1>\n          <input className = 'inputp'\n            placeholder=\"Enter your note\"\n            value={this.state.todo}\n            onChange={this.onChange}\n            autoFocus=\"autofocus\"\n            onKeyPress={this.checkKey}\n          />\n          <button className=\"buttonstyle\" onClick={this.addTodo}>add to list</button>\n          <ol className=\"list\">\n            {this.state.mytodos.map((todo, index) => (\n              <div key={index}>\n                <li onClick={e => this.del(index)}>{todo}</li>\n                <br></br>\n              </div>\n            ))}\n          </ol>\n        </div>\n      );\n    }\n  }\n\nexport default Todo;","import React from 'react';\nimport \"./App.css\";\nimport Todo from \"./components/Todo.js\";\n\nclass App extends React.Component {\n  render() {\n    console.log();\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n     <Todo/>\n      </header>\n       \n      </div>\n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}